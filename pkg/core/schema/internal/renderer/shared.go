package renderer

import (
	"fmt"
	"strings"

	"github.com/version-1/gooo/pkg/schema/internal/template"
)

type SharedTemplate struct {
	pkg         string
	schemaNames []string
}

func NewSharedTemplate(pkg string, schemaNames []string) *SharedTemplate {
	return &SharedTemplate{
		pkg:         pkg,
		schemaNames: schemaNames,
	}
}

func (s SharedTemplate) Filename() string {
	return fmt.Sprintf("%s%s", GeneratedFilePrefix, "shared")
}

func (s SharedTemplate) Render() (string, error) {
	str := ""
	str += fmt.Sprintf("package %s\n", s.pkg)
	str += "\n"
	str += "// this file is generated by gooo ORM. DON'T EDIT this file\n"

	sharedLibs := []string{
		"\"context\"",
		"\"database/sql\"",
		errorsPackage,
	}

	if len(sharedLibs) > 0 {
		str += fmt.Sprintf("import (\n%s\n)\n", strings.Join(sharedLibs, "\n"))
	}
	str += "\n"

	str += template.Interface{
		Name: "scanner",
		Inters: []string{
			"Scan(dest ...any) error",
		},
	}.String()

	str += template.Interface{
		Name: "queryer",
		Inters: []string{
			"QueryRowContext(ctx context.Context, query string, dest ...any) *sql.Row",
			"QueryContext(ctx context.Context, query string, dest ...any) (*sql.Rows, error)",
			"ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error)",
		},
	}.String()

	str += "\n"

	// errors
	str += `type NotFoundError struct {}

		func (e NotFoundError) Error() string {
			return "record not found"
		}

		var ErrNotFound = NotFoundError{}`

	str += "\n"

	str += `type PrimaryKeyMissingError struct {}

		func (e PrimaryKeyMissingError) Error() string {
			return "primary key is required"
		}

		var ErrPrimaryKeyMissing = PrimaryKeyMissingError{}`

	str += "\n"

	for _, name := range s.schemaNames {
		str += fmt.Sprintf(`func New%s() *%s {
				return &%s{}
    }
  `, name, name, name)
		str += "\n"

		str += fmt.Sprintf(`func New%sWith(obj %s) *%s {
				m := &%s{}
				m.Assign(obj)

				return m
    }
  `, name, name, name, name)
		str += "\n"
	}

	return pretify(s.Filename(), str)
}
