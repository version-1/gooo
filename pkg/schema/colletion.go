package schema

import (
	"fmt"
	"strings"

	"github.com/version-1/gooo/pkg/generator"
)

var errorsPackage = fmt.Sprintf("goooerrors \"%s\"", "github.com/version-1/gooo/pkg/datasource/orm/errors")
var schemaPackage = "\"github.com/version-1/gooo/pkg/schema\""

type SchemaCollection struct {
	URL     string
	Dir     string
	Package string
	Schemas []Schema
}

func (s SchemaCollection) PackageURL() string {
	url := fmt.Sprintf("%s/%s", s.URL, s.Dir)
	if strings.HasSuffix(url, "/") {
		return url[:len(url)-1]
	}

	return url
}

func (s SchemaCollection) Gen() error {
	g := generator.Generator{
		Dir:      s.Dir,
		Template: s,
	}

	if err := g.Run(); err != nil {
		return err
	}

	for _, schema := range s.Schemas {
		tmpl := SchemaTemplate{
			filename: schema.Name,
			URL:      s.PackageURL(),
			Package:  s.Package,
			Schema:   schema,
		}

		g := generator.Generator{
			Dir:      s.Dir,
			Template: tmpl,
		}

		if err := g.Run(); err != nil {
			return err
		}
	}

	return nil
}

func (s SchemaCollection) Filename() string {
	return "shared"
}

func (s SchemaCollection) Render() (string, error) {
	str := ""
	str += fmt.Sprintf("package %s\n", s.Package)
	str += "\n"
	str += "// this file is generated by gooo ORM. DON'T EDIT this file\n"

	sharedLibs := []string{
		"\"context\"",
		"\"database/sql\"",
		errorsPackage,
	}

	if len(sharedLibs) > 0 {
		str += fmt.Sprintf("import (\n%s\n)\n", strings.Join(sharedLibs, "\n"))
	}
	str += "\n"

	str += defineInterface("scanner", []string{
		"Scan(dest ...any) error",
	})

	str += defineInterface("validatable", []string{
		"Validate() goooerrors.ValidationError",
	})

	str += defineInterface("queryer", []string{
		"QueryRowContext(ctx context.Context, query string, dest ...any) *sql.Row",
		"QueryContext(ctx context.Context, query string, dest ...any) (*sql.Rows, error)",
		"ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error)",
	})

	str += "\n"

	str += `type NotFoundError struct {}

		func (e NotFoundError) Error() string {
			return "record not found"
		}

		var ErrNotFound = NotFoundError{}`

	str += "\n"

	str += `type PrimaryKeyMissingError struct {}

		func (e PrimaryKeyMissingError) Error() string {
			return "primary key is required"
		}

		var ErrPrimaryKeyMissing = PrimaryKeyMissingError{}`

	str += "\n"

	for _, schema := range s.Schemas {
		str += fmt.Sprintf(`func New%s() *%s {
				return &%s{
					Schema: schema.%sSchema,
				}
    }
  `, schema.Name, schema.Name, schema.Name, schema.Name)
	}

	return pretify(s.Filename(), str)
}
